# Spark home
hibench.spark.home       {%spark.home%}

# Spark master
#   standalone mode: spark://xxx:7077
#   YARN mode: yarn-client
hibench.spark.master     yarn

# executor number and cores when running on Yarn
hibench.yarn.executor.num     {%spark.executor.instances%}
hibench.yarn.executor.cores   {%spark.executor.cores%}

# executor and driver memory in standalone & YARN mode
spark.executor.memory  {%spark.executor.memory%}g
spark.driver.memory    4g

# set spark parallelism property according to hibench's parallelism value
spark.default.parallelism     ${hibench.default.map.parallelism}

# set spark sql's default shuffle partitions according to hibench's parallelism value
spark.sql.shuffle.partitions  200

#======================================================
# Spark Streaming
#======================================================
# Spark streaming Batchnterval in millisecond (default 100)
hibench.streambench.spark.batchInterval         100

# Number of nodes that will receive kafka input (default: 4)
hibench.streambench.spark.receiverNumber        4

# Indicate RDD storage level. (default: 2)
# 0 = StorageLevel.MEMORY_ONLY
# 1 = StorageLevel.MEMORY_AND_DISK_SER
# other = StorageLevel.MEMORY_AND_DISK_SER_2
hibench.streambench.spark.storageLevel 2

# indicate whether to test the write ahead log new feature (default: false)
hibench.streambench.spark.enableWAL false

# if testWAL is true, this path to store stream context in hdfs shall be specified. If false, it can be empty (default: /var/tmp)
hibench.streambench.spark.checkpointPath /var/tmp

# whether to use direct approach or not (dafault: true)
hibench.streambench.spark.useDirectMode true

spark.history.fs.cleaner.enabled true
spark.eventLog.enabled true
spark.eventLog.dir hdfs://master_hostname:9000/spark-history-server
spark.history.fs.logDirectory hdfs://master_hostname:9000/spark-history-server
spark.sql.warehouse.dir hdfs://master_hostname:9000/spark-warehouse
spark.yarn.historyServer.address master_hostname:18080
spark.history.ui.port 18080
